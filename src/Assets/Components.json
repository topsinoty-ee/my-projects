[
  {
    "name": "Button",
    "content": "# Button Component\nThis is an example of a React button component.\n\n## Usage\nImport the `Button` component and use it in your React application.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({\n  type = 'button',\n  color = 'white',\n  disabled,\n  onClick,\n  children,\n  className = ''\n}) => {\n  return (\n    <button\n      type={type}\n      disabled={disabled}\n      style={{ backgroundColor: `var(--${color})` }}\n      onClick={onClick}\n      className={`border-${color} button ${className}`}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  type: PropTypes.string,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nexport default Button;\n```\n"
  },
  {
    "name": "Navbar",
    "content": "# Navbar Component\n\nThis is an example of a React navbar component.\n\n## Usage\n\nImport the `Navbar` component, `Button` component, and a `menu icon` and use it in your React application.\n\n```jsx\nimport React, { useState } from 'react';\nimport Button from './Button';\nimport { ReactComponent as MenuIcon } from '../Assets/Hamburger-menu.svg';\nimport Menu from './Menu';\nimport PropTypes from 'prop-types';\n\nconst Navbar = ({ Image, links }) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  return (\n    <div\n      id=\"nav\"\n      className=\"flex justify-between content-between w-full items-center\"\n    >\n      <a href=\"/\">\n        {!Image ? <p style={{ color: 'red' }}>NO IMAGE FOUND</p> : <span>{Image}</span>}\n      </a>\n      <nav className=\"block sm:hidden md:hidden\">\n        <ol className=\"flex gap-3\">\n          {links.map((link, index) => (\n            <li key={index} className=\"\">\n              <Button\n                color={'fresh-mint'}\n                children={<a href={link.href}>{link.title}</a>}\n              />\n            </li>\n          ))}\n        </ol>\n      </nav>\n\n      <div className=\"hidden sm:block md:block\">\n        {!isMenuOpen && (\n          <Button\n            color={'fresh-mint'}\n            onClick={toggleMenu}\n            children={<MenuIcon />}\n          />\n        )}\n      </div>\n\n      {isMenuOpen && (\n        <Menu\n          color={'citrus-yellow'}\n          links={links}\n          onClose={toggleMenu}\n        />\n      )}\n    </div>\n  );\n};\n\nNavbar.propTypes = {\n  Image: PropTypes.element.isRequired,\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      href: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Navbar;\n```"
  },
  {
    "name": "Menu",
    "content": "# Menu\n\nThis is an example of a react menu component\n\n## Usage\nImport the `Menu` component and the `close-icon` and then use it in your React application.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ReactComponent as CloseIcon } from '../Assets/Close-icon.svg';\nimport Button from './Button';\n\nconst Menu = ({ color, links, onClose }) => {\n  return (\n    <div className=\"absolute top-5 right-4 bg-accent-white w-48 border rounded-xl rounded-bl-none rounded-br-xl flex\">\n      <div className=\"w-full flex-col rounded-xl rounded-bl-none \">\n        <div className=\"flex items-center rounded-t-xl rounded-r-xl  bg-citrus-yellow font-semibold w-full justify-end gap-12\">\n          <span>Close</span>\n          <Button\n            color={color}\n            onClick={onClose}\n            children={<CloseIcon />}\n          />\n        </div>\n\n        <ol className=''>\n          {links.map((link, i) => (\n            <li key={i} className='border border- hover:text-citrus-yellow hover:bg-white px-3 hover:animate-shock'>\n              <a className='w-full block'\n                href={link.href}\n                onClick={onClose}>\n                {link.title}\n              </a>\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nMenu.propTypes = {\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      href: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Menu;\n```"
  },
  {
    "name": "Socials",
    "content": "# Socials\n\nThis is an example of a react menu component\n\n## Usage\nImport the `Socials` component and use it in your React application.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Socials = ({ icons, bg, border }) => {\n  return (\n    <ul className={`flex ${border || 'border rounded-lg shadow-sm'} p-3 bg-${bg || 'fresh-mint'} h-20`}>n    {icons.map((icon, i) => (\n      <li key={i} className=\"px-3 h-full\">\n        <a\n          href={icon.link}\n          title={icon.title}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"h-full\"\n        >\n          <img\n            className=\"hover:animate-fast-pulse h-full\"\n            src={icon.image}\n            alt={icon.title}\n          />\n        </a>\n      </li>\n    ))}\n    </ul>\n  );\n};\n\nSocials.propTypes = {\n  hoverColor: PropTypes.string,\n  height: PropTypes.string,\n  icons: PropTypes.arrayOf(\n    PropTypes.shape({\n      link: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Socials;\n```"
  },
  {
    "name": "Form",
    "content": "# Form\n\nThis is an example of a react menu component.\n\n## Usage\nImport the `Form` component and use it in your React application. It requires the `Button`, `InputField` component, and the `TextareaField` component.\n\n```jsx\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField from './Inputs/InputField';\nimport TextareaField from './Inputs/TextareaField';\nimport Button from './Button';\n\nconst Form = ({ ENDPOINT, fields = [], formTitle, className }) => {\n  const [inputValues, setInputValues] = useState({});\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const handleInputChange = (fieldName, value) => {\n    setInputValues((prevInputValues) => ({\n      ...prevInputValues,\n      [fieldName]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log('Form submitted:');\n    console.log(inputValues);\n\n    try {\n      const response = await fetch(ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(inputValues),\n      });\n\n      if (response.ok) {\n        console.log('Form data submitted successfully');\n        setFormSubmitted(true);\n      } else {\n        console.error('Failed to submit form data');\n      }\n    } catch (error) {\n      console.error('Failed to submit form data:', error);\n    }\n  };\n\n  const FormInputs = (\n    <form className={className} onSubmit={handleSubmit}>\n      <h1 className=\"text-5xl sm:text-4xl sm:text-center text-white\">\n        {formTitle || 'Untitled Form'}\n      </h1>\n      {fields.length > 0 ? (\n        fields.map((field, index) => {\n          const {\n            fieldType,\n            title,\n            required,\n            name,\n            type,\n            value,\n            placeholder,\n            capitalize,\n          } = field;\n          const fieldName = `${formTitle} -> ${title}`;\n\n          if (fieldType === 'input') {\n            return (\n              <InputField\n                key={index}\n                label={title || 'Untitled Input Field'}\n                name={name || type}\n                type={type || 'text'}\n                placeholder={placeholder || title}\n                capitalize={capitalize}\n                value={inputValues[fieldName] || value || ''}\n                required={required}\n                onChange={(e) => handleInputChange(fieldName, e.target.value)}\n              />\n            );\n          } else if (fieldType === 'textarea') {\n            return (\n              <TextareaField\n                key={index}\n                label={title || 'Untitled Textarea Field'}\n                name={name || fieldType}\n                placeholder={title || placeholder}\n                value={inputValues[fieldName] || value || ''}\n                required={required}\n                onChange={(e) => handleInputChange(fieldName, e.target.value)}\n              />\n            );\n          } else {\n            return (\n              <span\n                key={index}\n                style={{ color: 'red', textTransform: 'uppercase' }}\n              >\n                Renders only input or textarea\n              </span>\n            );\n          }\n        })\n      ) : (\n        <span>Input field values not found</span>\n      )}\n      <Button\n        color=\"citrus-yellow\"\n        className=\"mt-8 hover:scale-y-105 transition duration-300\"\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </form>\n  );\n  const formSentMessage = (\n    <div className={className}>\n      <span className=\"text-5xl sm:text-4xl sm:text-center text-white mb-4\">\n        Thank you for reaching out ðŸ¤—\n      </span>\n      <Button\n        onClick={() => {\n          setFormSubmitted(false);\n          return FormInputs;\n        }}\n      >\n        Send another message\n      </Button>\n    </div>\n  );\n\n  if (formSubmitted) {\n    return formSentMessage;\n  }\n\n  return FormInputs;\n};\n\nForm.propTypes = {\n  ENDPOINT: PropTypes.string,\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      fieldType: PropTypes.oneOf(['input', 'textarea']).isRequired,\n      title: PropTypes.string.isRequired,\n      type: PropTypes.string,\n      required: PropTypes.bool,\n      value: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n  formTitle: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Form;\n```"
  },
  {
    "name": "InputField",
    "content": "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputField = ({\n  id,\n  label,\n  placeholder,\n  name,\n  type,\n  value,\n  capitalize,\n  required,\n  onChange,\n}) => {\n  return (\n    <span className=\"flex-col flex py-2 gap-1\">\n      <label\n        htmlFor={name}\n        className=\"capitalize select-none font-semibold\"\n      >\n        {label}\n        {required && <span style={{ color: 'red' }}>*</span>}\n      </label>\n      <input\n        id={id || name}\n        type={type || 'text'}\n        required={required || false}\n        placeholder={placeholder || name}\n        name={name}\n        value={value}\n        onChange={onChange}\n        style={{ textTransform: `${capitalize ? 'capitalize' : 'none'}` }}\n        className=\"px-3 py-2 rounded-md outline-none\"\n      />\n    </span>\n  );\n};\n\nInputField.propTypes = {\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  required: PropTypes.bool,\n  capitalize: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputField;\n```"
  },
  {
    "name": "TextareaField",
    "content": "```jsx\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextareaField = ({\n  id,\n  label,\n  placeholder,\n  name,\n  value,\n  required,\n  onChange,\n}) => {\n  const [val, setVal] = useState(value);\n  const [isErr, setIsErr] = useState(false);\n\n  const handleTextareaChange = (e) => {\n    const updatedValue =\n      e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1);\n    setVal(updatedValue);\n\n    setIsErr(val.length < 2);\n\n    if (onChange) {\n      onChange(e);\n    }\n  };\n\n  return (\n    <span className=\"flex flex-col gap-1\">\n      <label\n        htmlFor={name}\n        className=\"capitalize select-none font-semibold\"\n      >\n        {label}\n        {required && <span style={{ color: 'red' }}>*</span>}\n      </label>\n      <textarea\n        id={id || name}\n        required={required || false}\n        placeholder={placeholder || name}\n        name={name}\n        value={val}\n        onChange={handleTextareaChange}\n        className=\"px-3 py-2 rounded-md outline-none h-24\"\n        minLength={3}\n      ></textarea>\n      {isErr && (\n        <span className=\"text-red-500\">\n          Minimum length of 3 characters required.\n        </span>\n      )}\n    </span>\n  );\n};\n\nTextareaField.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default TextareaField;\n```"
  },
  {
    "name": "TypewriterComponent",
    "content": "```jsx\nimport React, { useRef, useState, useEffect } from 'react';\n\nconst TypewriterComponent = ({ strings, className }) => {\n  const [displayedString, setDisplayedString] = useState('');\n  const [isTyping, setIsTyping] = useState(true);\n  const [isLastString, setIsLastString] = useState(false);\n\n  const currentIndexRef = useRef(0);\n  const charIndexRef = useRef(0);\n  const deleteTimerRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n\n    const typeNextChar = () => {\n      const currentString = strings[currentIndexRef.current];\n      const currentChar = currentString[charIndexRef.current];\n\n      if (isTyping) {\n        setDisplayedString(\n          (prevDisplayedString) => prevDisplayedString + currentChar\n        );\n        charIndexRef.current++;\n\n        if (charIndexRef.current === currentString.length && !isLastString) {\n          setIsTyping(false);\n\n          if (currentIndexRef.current === strings.length - 1) {\n            setIsLastString(true);\n          }\n        }\n      } else {\n        if (isLastString) {\n          clearInterval(timer);\n          clearTimeout(deleteTimerRef.current);\n          return;\n        } else {\n          deleteTimerRef.current = setTimeout(typeNextString, 3000);\n\n          if (displayedString === '') {\n            clearTimeout(deleteTimerRef.current);\n            typeNextString();\n          } else {\n            setDisplayedString((prevDisplayedString) =>\n              prevDisplayedString.slice(0, -1)\n            );\n          }\n        }\n      }\n    };\n\n    const typeNextString = () => {\n      currentIndexRef.current++;\n\n      if (currentIndexRef.current < strings.length) {\n        charIndexRef.current = 0;\n        setIsTyping(true);\n      } else {\n        clearInterval(timer);\n      }\n    };\n\n    timer = setInterval(typeNextChar, 90);\n\n    return () => {\n      clearInterval(timer);\n      clearTimeout(deleteTimerRef.current);\n    };\n  }, [strings, displayedString, isTyping, isLastString]);\n\n  return (\n    <span className={className}>\n      {displayedString}\n      {displayedString && !isLastString && (\n        <span className=\"blink-cursor\">|</span>\n      )}\n    </span>\n  );\n};\n\nexport default TypewriterComponent;\n```"
  },
  {
    "name": "Card",
    "content": "```jsx\nimport React, { useState } from 'react';\n\nconst Card = ({ image, cardTitle = 'card title', cardText = 'card text' }) => {\n  const [cardImage, setCardImage] = useState({\n    src:\n      image?.src ||\n      'https://storage.googleapis.com/proudcity/mebanenc/uploads/2021/03/placeholder-image.png',\n    alt: image?.alt || 'image',\n  });\n\n  return (\n    <div>\n      <div>\n        <img src={cardImage.src} alt={cardImage.alt} />\n      </div>\n      <div>\n        <h2>{cardTitle}</h2>\n        <p>{cardText}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n```"
  },
  {
    "name": "Carousel",
    "content": "```jsx\nimport React, { useState } from 'react';\nimport Button from './Button';\n\nconst Carousel = ({ id, controls = false, carouselCards, ...rest }) => {\n  const [cards, setCards] = useState(carouselCards);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n\n  let buttons = null;\n  if (controls) {\n    buttons = (\n      <>\n        <Button\n          color={'white'}\n          children={'<'}\n          onClick={() => {\n            setCurrentCardIndex(\n              (currentCardIndex - 1 + cards.length) % cards.length\n            );\n          }}\n        />\n        <Button\n          color={'white'}\n          children={'>'}\n          onClick={() => {\n            setCurrentCardIndex(\n              (currentCardIndex + 1 + cards.length) % cards.length\n            );\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <section {...rest.section}>\n      {!cards ? (\n        <p>No cards</p>\n      ) : (\n        <>\n          {buttons}\n          <ul id={id} role=\"listbox\" {...rest.carousel}>\n            {cards.map((card, index) => (\n              <li\n                key={index}\n                tabIndex={index}\n                role=\"option\"\n                aria-selected=\"false\"\n              >\n                {card}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default Carousel;\n```"
  }
]
